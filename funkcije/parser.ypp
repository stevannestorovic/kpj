%{
#include <iostream>
#include <string>
#include <map>
#include <cmath>
#include "Funkcije.hpp"

using namespace std;

extern int yylex();
void yyerror(string s) {
        cerr << "Sintaksna greska :(" << endl;
}

map<char, Funkcija*> tablica;



%}
%union {
        double b;
        char c;
        Funkcija *f;
}

%token <b> num_token;
%token <c> id_token;
%token sin_token value_token cos_token function_token

%left '+' '-'
%left '*' '/'
%left '\''

%type <f> E

%%
Program:Naredba '\n'  Program 
       | 
       ;

Naredba: value_token '"'E'"'  { cout<< $3->izracunaj(0) << endl; }
       | function_token id_token '=' '"' E '"' { tablica[$2] = $5; }
       | id_token {tablica[$1]->ispisi();}
       | id_token '[' num_token ']' {cout << tablica[$1]->izracunaj($3) << endl;}
       | E'\'' { $1->izvod()->ispisi();}
       | id_token '\'' {tablica[$1]->izvod()->ispisi();}
       ;

E: E '+' E   {$$ = new Zbir($1, $3);}
 | E '-' E   {} 
 | E '*' E   {$$ = new Proizvod($1, $3);}
 | E '/' E   {}
 | '(' E ')' { $$ = $2; } 
 | sin_token'(' E ')' {$$ = new Sinus($3);}
 | cos_token'(' E ')' {$$ = new Cosinus($3);}
 | num_token { $$ = new Konstanta($1); }
 | 'x'       { $$ = new Id(); } 
 | id_token  { $$ = tablica[$1]; }
 ;


%%

int main() {
        yyparse();
}
