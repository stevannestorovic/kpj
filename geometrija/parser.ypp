%{
//#define YYDEBUG 1
#include <iostream>
#include <string>
#include <cstdlib>
#include <vector>
#include <map>
using namespace std;

extern int yylex();
void yyerror(string s) {
	cerr << "Doslo je do greske:" << endl;
	cerr << s << endl;
	exit(EXIT_FAILURE); 
}

void printV(vector<double>* v) {
	for(int i = 0; i < v->size(); i++) {
	}
}
map<string, vector<double>* > tablica;

%}

%union {
	double br;
	std::string *ime;
	std::vector<double> *v;
}

%token <br> num_token
%token <ime> vector_id_token
%token vector_token print_token
%type <v> Dodela NizBrojeva

%%

Program: Program Naredba ';'
       | Naredba ';'
       ;

Naredba: vector_token NizDodela
       | print_token vector_id_token {
					vector<double>* tmp = tablica[*$2]; 
					for(int i = 0; i < tmp->size(); i++) {
						cout << (*tmp)[i] << ", ";
					}
					cout << endl;
				     }
       | vector_id_token '=' '[' NizBrojeva']' {
						// proverimo da li $1 postojiu tablici
						map<string, vector<double>* >::iterator it;
						it = tablica.find(*$1);
						if(it == tablica.end()) {
						   cout << "Vektor " << *$1 << " ne postoji";
						} else {
							delete it->second;
							tablica[*$1] = $4;
						}
					       }
       |print_token Izraz {vector<double> *tmp = $1;}
       ;

Izraz: Izraz '+' Izraz {}
     | num_token '*' Izraz
     | Vektor
     ;

NizDodela: NizDodela ',' Dodela
         | Dodela
         ;

Dodela: vector_id_token                      {tablica[*$1] = new vector<double>(10);}
      | vector_id_token '=' Vektor {tablica[*$1] = $4;}
      ;
Vektor: '[' NizBrojeva ']' {$$ = $1;}

NizBrojeva:  NizBrojeva ',' num_token { $$ = $1; $$->push_back($3); }
          | num_token {$$ = new vector<double>; $$->push_back($1); }
          ;

%%


int main() {
//	yydebug = 1;
	yyparse();
}
